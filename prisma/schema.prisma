generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts             Account[]
  sessions             Session[]
  userInfos            UserInfo?
  userFavoriteProducts UserFavoriteProduct[]
  carts                Cart[]
  orders               Order[]
  productReviews       ProductReview[]
  notifications        Notification[]

  @@map("users")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model UserInfo {
  id                 String  @id @default(uuid())
  userId             String  @unique @map("user_id")
  phone              String
  cpf                String  @unique
  birthday           String
  policyConsent      Boolean @default(false) @map("policy_consent")
  advertisingConsent Boolean @default(false) @map("advertising_consent")

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAddress UserAddress[]

  @@map("user_infos")
}

model UserAddress {
  id                String   @id @default(uuid())
  userInfoId        String   @map("user_info_id")
  cep               String
  street            String
  number            String
  neighborhood      String
  addressComplement String?  @map("address_complement")
  addressReference  String?  @map("address_reference")
  city              String
  state             String
  isMainAddress     Boolean? @default(false) @map("is_main_address")

  userInfo UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
  orders   Order[]

  @@map("user_addresses")
}

model Product {
  id          String    @id @default(uuid())
  cod         String    @unique
  name        String
  description String
  imageUrl    String    @map("image_url")
  price       Float
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  productDetails       ProductDetail[]
  userFavoriteProducts UserFavoriteProduct[]
  cartItems            CartItem[]
  orderItems           OrderItem[]
  productReviews       ProductReview[]

  @@map("products")
}

enum ProductDepartment {
  GENERICO
  COZINHA
  ESCRITORIO
  QUARTO
  SALA
  SALA_JANTA
}

model ProductDetail {
  id               String            @id @default(uuid())
  productId        String            @map("product_id")
  stockQuantity    Int               @map("stock_quantity")
  color            String
  width            Float
  height           Float
  length           Float
  weight           Float
  depth            Float?
  supportedLoad    Float?            @map("supported_load")
  requiresAssembly Boolean?          @default(false) @map("requires_assembly")
  discount         Float?
  addition         Float?
  details          String?
  specifications   String?
  department       ProductDepartment @default(GENERICO)

  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("product_details")
}

model UserFavoriteProduct {
  userId    String @map("user_id")
  productId String @map("product_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("user_favorite_products")
}

model Cart {
  id         String    @id @default(uuid())
  userId     String    @unique @map("user_id")
  preOrderId String    @map("pre_order_id")
  deliveryIn String    @map("delivery_in")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String @map("cart_id")
  productId String @map("product_id")
  price     Float
  quantity  Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
  AWAITING_PAYMENT
  PAYMENT_IN_ANALYSIS
  PAYMENT_DECLINED
  PAYMENT_CONFIRMED
  CHARGE_CANCELED
}

enum OrderPaymentType {
  A_DEFINIR
  PIX
  CARTAO_CREDITO
  DEBITO
  BOLETO
}

model Order {
  id                        String           @id @default(uuid())
  userId                    String           @map("user_id")
  paymentInstitutionOrderId String?          @unique @map("payment_institution_order_id")
  subtotal                  Float            @map("total_price")
  discount                  Float
  deliveryFee               Float            @map("delivery_fee")
  status                    OrderStatus      @default(PENDING)
  deliveryIn                String           @map("delivery_in")
  paymentType               OrderPaymentType @default(A_DEFINIR) @map("payment_type")
  createdAt                 DateTime         @default(now()) @map("created_at")
  updatedAt                 DateTime?        @updatedAt @map("updated_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAddress UserAddress @relation(fields: [deliveryIn], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              String @id @default(uuid())
  orderId         String @map("order_id")
  productId       String @map("product_id")
  quantity        Int
  priceAtPurchase Float  @map("price_at_purchase")

  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productReview ProductReview?

  @@unique([productId, orderId])
  @@map("order_items")
}

model Checkout {
  id                           String   @id @default(uuid())
  referenceId                  String   @unique @map("reference_id")
  paymentInstitutionCheckoutId String   @unique @map("payment_institution_checkout_id")
  expirationDate               DateTime
  status                       String
  createdAt                    DateTime @default(now()) @map("created_at")

  @@map("checkouts")
}

model ProductReview {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  productId   String    @map("product_id")
  orderItemId String    @unique @map("order_item_id")
  score       Int
  reviewTitle String    @map("review_title")
  reviewText  String    @map("review_text")
  anonymous   Boolean?
  approved    Boolean?
  reject      Boolean?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([userId, orderItemId])
  @@map("product_reviews")
}

enum NotificationTag {
  GENERAL
  NEWS
  REMINDS
  NOTICES
  OFFERS
  OTHERS
}

model Notification {
  id        String          @id @default(uuid())
  userId    String          @map("user_id")
  title     String
  subtitle  String
  content   String
  tag       NotificationTag @default(GENERAL)
  readAt    DateTime?       @map("read_at")
  createdAt DateTime        @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
