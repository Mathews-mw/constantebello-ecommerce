generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts                 Account[]
  sessions                 Session[]
  customerInfos            CustomerInfo?
  customerFavoriteProducts CustomerFavoriteProduct[]

  @@map("users")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model CustomerInfo {
  id                 String   @id @default(uuid())
  userId             String   @unique @map("user_id")
  phone              String
  cpf                String   @unique
  birthday           String
  policyConsent      Boolean  @default(false) @map("policy_consent")
  advertisingConsent Boolean  @default(false) @map("advertising_consent")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerAddress CustomerAddress[]

  @@map("customers_infos")
}

model CustomerAddress {
  id                String   @id @default(uuid())
  customerId        String   @map("customer_id")
  cep               String
  street            String
  number            String
  neighborhood      String
  addressComplement String?  @map("address_complement")
  addressReference  String?  @map("address_reference")
  city              String
  state             String
  isPrincipal       Boolean? @default(false) @map("is_principal")

  customerInfo CustomerInfo @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

model Product {
  id          String    @id @default(uuid())
  cod         String    @unique
  name        String
  description String
  imageUrl    String    @map("image_url")
  price       Float
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  productDetails           ProductDetail[]
  customerFavoriteProducts CustomerFavoriteProduct[]

  @@map("products")
}

enum ProductDepartment {
  GENERICO
  COZINHA
  ESCRITORIO
  QUARTO
  SALA
  SALA_JANTA
}

model ProductDetail {
  id                String            @id @default(uuid())
  productId         String            @map("product_id")
  quantityAvailable Int               @map("quantity_available")
  color             String
  width             Float
  height            Float
  length            Float
  weight            Float
  depth             Float?
  supportedLoad     Float?            @map("supported_load")
  requiresAssembly  Boolean?          @default(false)
  discount          Float?
  addition          Float?
  details           String?
  specifications    String?
  department        ProductDepartment @default(GENERICO)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime?         @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("product_details")
}

model CustomerFavoriteProduct {
  userId    String @map("user_id")
  productId String @map("product_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("customer_favorite_products")
}
